2020-11-23:
之前的mysql版本有些低，弄个maria
docker run --name myflow -v /opt/zhangyang/mysql/db2:/var/lib/mysql -p 3306:3307 -e MYSQL_ROOT_PASSWORD=zhang -d mariadb
docker run -it --rm mariadb mysql -h10.19.17.188 -P3307 -uroot -pzhang

2020-11-20:
数据库异常是sqlalchemy释放的时候，释放其他线程里面的session，造成的。所以需要在线程用完session的时候，关闭线程。
检查状态的时，不读取work_data列，减少传输的量
整理代码

2020-11-13:
第一个flow跑通了，但是还有异常
错误处理的流程，和异常应该好好再考虑一下
把异常处理完之后，把代码好好整理整理，再往事务发件箱上面去调整

2020-11-11:

发现pika线程的问题，造成了异常。而且影响到了数据库的session。
使用线程安全的方式后，pika发送消息的确认就和事务分离了。所以最后还是要考虑事务性发件箱的模式

2020-11-10:

self.database_facade.add_task(tasks)
self.event_facade.send_task(tasks)
self.database_facade.commit()

# 上面这个样子，commit后线程挂了，那么就没有事件发送出来，流程就停住了
# 下面的方式，有个问题，如果消息先被处理了，而commit还没有做完，接收端可能拿不到正确的数据

self.database_facade.add_task(tasks)
self.database_facade.commit()
self.event_facade.send_task(tasks)

# 事务性发件箱模式，看来还是最成熟的方式

先按照第一种方式，把整个流程过一下
然后把消息的发送改成事件发件箱模式


2020-10-20:
经过了一段时间的考虑，大致决定了用哪些工具，现在需要把概念转换到代码上面


2020-10-20 之前:

# 在docker上跑一个数据库用来测试
docker run --name some-mysql -v /opt/zhangyang/mysql/db1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=zhang -d mysql
docker run -it --rm mysql mysql -uroot -p

docker run --name some-mysql -v /opt/zhangyang/mysql/db2:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=zhang -d mysql:5
docker run -it --rm mysql:5 mysql -h10.19.17.188 -P3306 -uroot -pzhang

# perfect workerflow engine，也许可以参考一下
https://docs.prefect.io


uvicorn job_model_server:app --port 12345 --no-access-log

uvicorn job_model_server:app --port 12345 --no-access-log --workers 10 --lifespan off
